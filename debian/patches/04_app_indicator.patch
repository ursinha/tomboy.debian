=== modified file 'Tomboy/Makefile.am'
Index: trunk/Tomboy/Makefile.am
===================================================================
--- trunk.orig/Tomboy/Makefile.am
+++ trunk/Tomboy/Makefile.am
@@ -122,6 +122,7 @@ CSFILES = 					\
 	$(srcdir)/Tag.cs			\
 	$(srcdir)/TagButton.cs			\
 	$(srcdir)/TagManager.cs			\
+	$(srcdir)/TomboyIndicatorTray.cs	\
 	$(srcdir)/Tray.cs 			\
 	$(srcdir)/Trie.cs			\
 	$(srcdir)/Undo.cs 			\
@@ -147,6 +148,7 @@ CSFILES = 					\
 
 ASSEMBLIES = 		\
 	$(GTKSHARP_LIBS) 	\
+	$(APPINDICATORSHARP_LIBS) 	\
 	$(GNOME_LIBS) 	\
 	-r:Mono.Posix	\
 	$(DBUS_LIBS)	\
Index: trunk/Tomboy/NoteManager.cs
===================================================================
--- trunk.orig/Tomboy/NoteManager.cs
+++ trunk/Tomboy/NoteManager.cs
@@ -369,6 +369,9 @@ Ciao!");
 			// Update the trie so addins can access it, if they want.
 			trie_controller.Update ();
 
+			if (NotesLoaded != null)
+				NotesLoaded (this, EventArgs.Empty);
+
 			bool startup_notes_enabled = (bool)
 			                             Preferences.Get (Preferences.ENABLE_STARTUP_NOTES);
 
Index: trunk/Tomboy/RecentChanges.cs
===================================================================
--- trunk.orig/Tomboy/RecentChanges.cs
+++ trunk/Tomboy/RecentChanges.cs
@@ -248,7 +248,8 @@ namespace Tomboy
 			am ["DeleteNotebookAction"].Activated += OnDeleteNotebook;
 			am ["CloseWindowAction"].Activated += OnCloseWindow;
 			if (Tomboy.TrayIconShowing == false &&
-			    (bool) Preferences.Get (Preferences.ENABLE_TRAY_ICON))
+			    (bool) Preferences.Get (Preferences.ENABLE_TRAY_ICON) &&
+				!TomboyIndicatorTray.IndicatorTrayPresent)
 				am ["CloseWindowAction"].Visible = false;
 
 			// Allow Escape to close the window as well as <Control>W
@@ -1128,7 +1129,8 @@ namespace Tomboy
 			instance = null;
 #if !MAC
 			if (Tomboy.TrayIconShowing == false &&
-			    (bool) Preferences.Get (Preferences.ENABLE_TRAY_ICON))
+			    (bool) Preferences.Get (Preferences.ENABLE_TRAY_ICON) &&
+				!TomboyIndicatorTray.IndicatorTrayPresent)
 				Tomboy.ActionManager ["QuitTomboyAction"].Activate ();
 #endif
 		}
Index: trunk/Tomboy/Tomboy.cs
===================================================================
--- trunk.orig/Tomboy/Tomboy.cs
+++ trunk/Tomboy/Tomboy.cs
@@ -191,11 +191,17 @@ namespace Tomboy
 #endif
 		}
 
+		static TomboyIndicatorTray indicator;
 		static void StartTrayIcon ()
 		{
-			// Create the tray icon and run the main loop
-			tray_icon = new TomboyTrayIcon (manager);
-			tray = tray_icon.Tray;
+			if (TomboyIndicatorTray.IndicatorTrayPresent) {
+				indicator = new TomboyIndicatorTray (manager);
+			} else {
+				// Create the tray icon and run the main loop
+				tray_icon = new TomboyTrayIcon (manager);
+				tray = tray_icon.Tray;
+			}
+
 			StartMainLoop ();
 		}
 
Index: trunk/Tomboy/TomboyIndicatorTray.cs
===================================================================
--- /dev/null
+++ trunk/Tomboy/TomboyIndicatorTray.cs
@@ -0,0 +1,180 @@
+//  
+//  Copyright (C) 2009 GNOME Do
+// 
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+// 
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+// 
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+// 
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+
+using Mono.Unix;
+
+using Gnome;
+using AppIndicator;
+
+namespace Tomboy
+{
+	public class TomboyIndicatorTray
+	{
+		public static bool IndicatorTrayPresent {
+			get {
+				return true;
+			}
+		}
+		
+		ApplicationIndicator indicator;
+		NoteManager manager;
+		Gtk.Menu menu;
+		int idle_source = 0;
+
+		public TomboyIndicatorTray (NoteManager manager)
+		{
+			this.manager = manager;
+			indicator = new ApplicationIndicator ("tomboy-notes", "tomboy", Category.ApplicationStatus);
+			
+			SetMenuItems ();
+			indicator.Status = Status.Active;
+			indicator.Title = Catalog.GetString ("Tomboy Notes");
+
+			manager.NoteDeleted += OnNoteDeleted;
+			manager.NoteAdded += OnNoteAdded;
+			manager.NoteRenamed += OnNoteRenamed;
+			manager.NotesLoaded += OnNotesLoaded;
+		}
+
+		void OnNoteAdded (object sender, Note added)
+		{
+			SetMenuItems ();
+		}
+
+		void OnNoteDeleted (object sender, Note deleted)
+		{
+			SetMenuItems ();
+		}
+
+		void OnNoteRenamed (Note renamed, string old_title)
+		{
+			SetMenuItems ();
+		}
+
+		void OnNotesLoaded (object sender, EventArgs args)
+		{
+			SetMenuItems ();
+		}
+		
+		void SetMenuItems ()
+		{
+			if (idle_source == 0)
+				GLib.Idle.Add(SetMenuItemsIdle);
+		}
+
+		bool SetMenuItemsIdle ()
+		{
+			idle_source = 0;
+
+			if (menu != null) {
+				foreach (Gtk.Widget widget in menu.Children) {
+					menu.Remove (widget);
+					widget.Destroy ();
+				}
+			}
+			
+			menu = new Gtk.Menu ();
+			
+			foreach (Gtk.MenuItem item in CurrentMenuItems ()) {
+				menu.Append (item);
+				item.Show();
+			}
+
+			menu.Show();
+			
+			//if (indicator.Menu == null)
+			indicator.Menu = menu;
+
+			return false;
+		}
+		
+		Gtk.MenuItem CreateNoteMenuItem(Note n)
+		{
+		    var item = new Gtk.MenuItem (n.Title);
+			item.Activated += (o, a) => SetMenuItems ();
+			item.Activated += (o, a) => n.Window.Present ();
+			return item;
+		}
+
+		IEnumerable<Gtk.MenuItem> CurrentMenuItems ()
+		{
+			Gtk.ImageMenuItem item;
+			
+			item = new Gtk.ImageMenuItem (Catalog.GetString ("Create New Note"));
+			item.Image = new Gtk.Image (Gtk.Stock.New, Gtk.IconSize.Menu);
+			item.Activated += (o, a) => Tomboy.ActionManager["NewNoteAction"].Activate ();
+			item.Activated += (o, a) => SetMenuItems ();
+			yield return item;
+			
+			item = new Gtk.ImageMenuItem (Catalog.GetString ("_Search All Notes"));
+			item.Image = new Gtk.Image (Gtk.Stock.Find, Gtk.IconSize.Menu);
+			item.Activated += (o, a) => Tomboy.ActionManager["ShowSearchAllNotesAction"].Activate ();
+			yield return item;
+			
+			yield return new Gtk.SeparatorMenuItem ();
+			
+			if (manager != null && manager.Notes != null) {
+				Tag template_tag = TagManager.GetOrCreateSystemTag (TagManager.TemplateNoteSystemTag);
+				var menuItems = manager.Notes
+					.Where (n => !n.IsSpecial && !n.ContainsTag(template_tag))
+					.OrderByDescending (n => n.ChangeDate)
+					.Take (10)
+					.Select (n => CreateNoteMenuItem(n))
+					.ToArray ();
+				// avoid lazy eval for menu item construction
+				
+				foreach (Gtk.MenuItem mi in menuItems) {
+					yield return mi;
+				}
+			}
+			
+			yield return new Gtk.SeparatorMenuItem ();
+			
+			Gtk.MenuItem mitem = new Gtk.MenuItem (Catalog.GetString ("S_ynchronize Notes"));
+			// setting this changes the menu text to "Convert"
+			// item.Image = new Gtk.Image (Gtk.Stock.Convert, Gtk.IconSize.Menu);
+			mitem.Activated += (o, a) => Tomboy.ActionManager["NoteSynchronizationAction"].Activate ();
+			yield return mitem;
+			
+			item = new Gtk.ImageMenuItem (Catalog.GetString ("_Preferences"));
+			item.Image = new Gtk.Image (Gtk.Stock.Preferences, Gtk.IconSize.Menu);
+			item.Activated += (o, a) => Tomboy.ActionManager["ShowPreferencesAction"].Activate ();
+			yield return item;
+			
+			item = new Gtk.ImageMenuItem (Catalog.GetString ("_Help"));
+			item.Image = new Gtk.Image (Gtk.Stock.Help, Gtk.IconSize.Menu);
+			item.Activated += (o, a) => Tomboy.ActionManager["ShowHelpAction"].Activate ();
+			yield return item;
+			
+			item = new Gtk.ImageMenuItem (Catalog.GetString ("_About Tomboy"));
+			item.Image = new Gtk.Image (Gtk.Stock.About, Gtk.IconSize.Menu);
+			item.Activated += (o, a) => Tomboy.ActionManager["ShowAboutAction"].Activate ();
+			yield return item;
+			
+			yield return new Gtk.SeparatorMenuItem ();
+			
+			item = new Gtk.ImageMenuItem (Catalog.GetString ("_Quit"));
+			item.Image = new Gtk.Image (Gtk.Stock.Quit, Gtk.IconSize.Menu);
+			item.Activated += (o, a) => Tomboy.ActionManager["QuitTomboyAction"].Activate ();
+			yield return item;
+		}
+	}
+}
Index: trunk/configure.ac
===================================================================
--- trunk.orig/configure.ac
+++ trunk/configure.ac
@@ -1,5 +1,4 @@
 AC_INIT(tomboy, 1.15.7)
-AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_SRCDIR(Tomboy/Tomboy.cs)
 AM_INIT_AUTOMAKE([dist-xz foreign no-dist-gzip tar-ustar])
 AM_MAINTAINER_MODE
@@ -207,6 +206,10 @@ PKG_CHECK_MODULES(GTKSHARP,
 		  gtk-sharp-2.0 >= $GTKSHARP2_MINIMUM_VERSION)
 AC_SUBST(GTKSHARP_LIBS)
 
+APPINDICATOR_MINIMUM_VERSION=0.0.5
+PKG_CHECK_MODULES(APPINDICATORSHARP,
+		  appindicator-sharp-0.1 >= $APPINDICATOR_MINIMUM_VERSION)
+AC_SUBST(APPINDICATORSHARP_LIBS)
 #
 # Printing at least needs Mono.Cairo
 #
@@ -384,6 +387,8 @@ ${PACKAGE}-${VERSION}
     Windows Support:            ${ENABLE_WIN}
     UNIT Test Support:          ${ENABLE_NUNIT}
 
+    D-Bus Support:              ${ENABLE_DBUS}
+
     GNOME Panel Applet Support: ${ENABLE_PANEL_APPLET}
 
     Evolution Add-in:           ${ENABLE_EVOLUTION}
Index: trunk/po/POTFILES.in
===================================================================
--- trunk.orig/po/POTFILES.in
+++ trunk/po/POTFILES.in
@@ -70,6 +70,7 @@ Tomboy/Synchronization/SyncDialog.cs
 Tomboy/Synchronization/SyncManager.cs
 Tomboy/Synchronization/SyncUtils.cs
 Tomboy/Tomboy.cs
+Tomboy/TomboyIndicatorTray.cs
 Tomboy/Tray.cs
 Tomboy/Utils.cs
 Tomboy/Watchers.cs
